// Code generated by MockGen. DO NOT EDIT.
// Source: ../datafetcher/datafetcher.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cloudwatchlogs "github.com/aws/aws-sdk-go/service/cloudwatchlogs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataFetcher is a mock of DataFetcher interface
type MockDataFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockDataFetcherMockRecorder
}

// MockDataFetcherMockRecorder is the mock recorder for MockDataFetcher
type MockDataFetcherMockRecorder struct {
	mock *MockDataFetcher
}

// NewMockDataFetcher creates a new mock instance
func NewMockDataFetcher(ctrl *gomock.Controller) *MockDataFetcher {
	mock := &MockDataFetcher{ctrl: ctrl}
	mock.recorder = &MockDataFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataFetcher) EXPECT() *MockDataFetcherMockRecorder {
	return m.recorder
}

// FetchData mocks base method
func (m *MockDataFetcher) FetchData(requestQueryParams map[string]string) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchData", requestQueryParams)
	ret0, _ := ret[0].(*cloudwatchlogs.GetQueryResultsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchData indicates an expected call of FetchData
func (mr *MockDataFetcherMockRecorder) FetchData(requestQueryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchData", reflect.TypeOf((*MockDataFetcher)(nil).FetchData), requestQueryParams)
}

// CreateQueryTemplate mocks base method
func (m *MockDataFetcher) CreateQueryTemplate(productNumber, serialNumber string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueryTemplate", productNumber, serialNumber)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateQueryTemplate indicates an expected call of CreateQueryTemplate
func (mr *MockDataFetcherMockRecorder) CreateQueryTemplate(productNumber, serialNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueryTemplate", reflect.TypeOf((*MockDataFetcher)(nil).CreateQueryTemplate), productNumber, serialNumber)
}

// GetLogGroupName mocks base method
func (m *MockDataFetcher) GetLogGroupName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogGroupName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLogGroupName indicates an expected call of GetLogGroupName
func (mr *MockDataFetcherMockRecorder) GetLogGroupName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogGroupName", reflect.TypeOf((*MockDataFetcher)(nil).GetLogGroupName))
}
